package net.serenitybdd.cucumber.adapter

import net.thucydides.core.model.TestResult
import spock.lang.Specification

/**
 * Uses a cucumber json file generated by
 * @see net.serenitybdd.cucumber.integration.SimpleScenarioWithTags
  */
class WhenImportingCucumberJsonFiles extends Specification {
    def "An imported TestOutcome's story should reflect the feature within which source scenario was defined"() {
        given:
        def adapter = new CucumberJsonAdapter();
        when:
        def outcomes = adapter.loadOutcomesFrom(new File("src/test/resources/cucumber-json-files/SimpleScenarioWithTags.json"))
        then:
        outcomes.size() == 1
        outcomes[0].userStory.storyName == "A simple feature with tags"
        outcomes[0].userStory.narrative == "This is about selling widgets"
        outcomes[0].userStory.path == "src/test/resources/samples/simple_scenario_with_tags.feature"
        outcomes[0].userStory.type == "feature"
    }
    def "An imported TestOutcome's steps should reflect the steps defined in the source scenario was defined"() {
        given:
        def adapter = new CucumberJsonAdapter();
        when:
        def outcomes = adapter.loadOutcomesFrom(new File("src/test/resources/cucumber-json-files/SimpleScenarioWithTags.json"))
        then:
        outcomes.size() == 1
        outcomes[0].testSteps.size() == 4
        outcomes[0].testSteps[0].description == "Given I want to purchase 2 widgets"
        outcomes[0].testSteps[0].result == TestResult.SUCCESS
        outcomes[0].testSteps[3].description == "Then I should be billed \$10"
        outcomes[0].testSteps[3].result == TestResult.SUCCESS
    }
    def "An imported TestOutcome should have all the tags applicable to the scenario"() {
        given:
        def adapter = new CucumberJsonAdapter();
        when:
        def outcomes = adapter.loadOutcomesFrom(new File("src/test/resources/cucumber-json-files/SimpleScenarioWithTags.json"))
        then:
        outcomes.size() == 1
        outcomes[0].getTagValue("flavor").get() == "strawberry"
        outcomes[0].getTagValue("color").get() == "red"
        def untypedTag = outcomes[0].getTagValue("tag").get()
        untypedTag == "shouldPass" || untypedTag == "in-progress"
    }

}

